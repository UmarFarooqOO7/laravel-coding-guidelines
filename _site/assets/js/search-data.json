{
  "1": {
    "id": "1",
    "title": "Do not get data from the .env file directly",
    "content": "Do not get data from the .env file directly Pass the data to config files instead and then use the config() helper function to use the data in an application. Bad: $apiKey = env(&#39;API_KEY&#39;); Good: // config/api.php &#39;key&#39; =&gt; env(&#39;API_KEY&#39;), // Use the data $apiKey = config(&#39;api.key&#39;);",
    "url": "http://localhost:4000/laravel-best-practices/docs/avoid-env-variable-directly/",
    "relUrl": "/docs/avoid-env-variable-directly/"
  },
  "2": {
    "id": "2",
    "title": "Avoid Fat Controllers",
    "content": "Avoid fat controllers and write frequent queries in model. Put all DB related logic into Eloquent models or into Repository classes if you’re using Query Builder or raw SQL queries. Bad: public function index() { $clients = Client::verified() -&gt;with([&#39;orders&#39; =&gt; function ($q) { $q-&gt;where(&#39;created_at&#39;, &#39;&gt;&#39;, Carbon::today()-&gt;subWeek()); }]) -&gt;get(); return view(&#39;index&#39;, [&#39;clients&#39; =&gt; $clients]); } Good: public function index() { return view(&#39;index&#39;, [&#39;clients&#39; =&gt; $this-&gt;client-&gt;getWithNewOrders()]); } class Client extends Model { public function getWithNewOrders() { return $this-&gt;verified() -&gt;with([&#39;orders&#39; =&gt; function ($q) { $q-&gt;where(&#39;created_at&#39;, &#39;&gt;&#39;, Carbon::today()-&gt;subWeek()); }]) -&gt;get(); } }",
    "url": "http://localhost:4000/laravel-best-practices/docs/avoid-fat-controllers/",
    "relUrl": "/docs/avoid-fat-controllers/"
  },
  "3": {
    "id": "3",
    "title": "Don't put JS and CSS in Blade",
    "content": "Do not put JS and CSS in Blade templates and do not put any HTML in PHP classes Bad: let article = `{{ json_encode($article) }}`; Better: &lt;input id=&quot;article&quot; type=&quot;hidden&quot; value=&quot;@json($article)&quot;&gt; Or &lt;button class=&quot;js-fav-article&quot; data-article=&quot;@json($article)&quot;&gt;{{ $article-&gt;name }}&lt;button&gt; In a Javascript file: let article = $(&#39;#article&#39;).val(); The best way is to use specialized PHP to JS package to transfer the data.",
    "url": "http://localhost:4000/laravel-best-practices/docs/avoid-js-css-blade-template/",
    "relUrl": "/docs/avoid-js-css-blade-template/"
  },
  "4": {
    "id": "4",
    "title": "Avoid Queries in Blade Templates & Use Eager Loading",
    "content": "Do not execute queries in Blade templates and use eager loading (N + 1 problem) Bad (for 100 users, 101 DB queries will be executed): @foreach (User::all() as $user) {{ $user-&gt;profile-&gt;name }} @endforeach Good (for 100 users, 2 DB queries will be executed): $users = User::with(&#39;profile&#39;)-&gt;get(); ... @foreach ($users as $user) {{ $user-&gt;profile-&gt;name }} @endforeach",
    "url": "http://localhost:4000/laravel-best-practices/docs/avoid-queries-blade-template/",
    "relUrl": "/docs/avoid-queries-blade-template/"
  },
  "5": {
    "id": "5",
    "title": "Business logics in Repositories",
    "content": "Business logic should be in repository class A controller must have only one responsibility, so move business logic from controllers to repository classes. Bad: public function store(Request $request) { if ($request-&gt;hasFile(&#39;image&#39;)) { $request-&gt;file(&#39;image&#39;)-&gt;move(public_path(&#39;images&#39;) . &#39;temp&#39;); } .... } Good: public function store(Request $request) { $this-&gt;articleRepository-&gt;handleUploadedImage($request-&gt;file(&#39;image&#39;)); .... } class ArticleRepository { public function handleUploadedImage($image) { if (!is_null($image)) { $image-&gt;move(public_path(&#39;images&#39;) . &#39;temp&#39;); } } }",
    "url": "http://localhost:4000/laravel-best-practices/docs/business-logics-repositories/",
    "relUrl": "/docs/business-logics-repositories/"
  },
  "6": {
    "id": "6",
    "title": "Don't repeat yourself (DRY)",
    "content": "Don’t repeat yourself (DRY) Reuse code when you can. SRP is helping you to avoid duplication. Also, reuse Blade templates, use Eloquent scopes etc. Bad: public function getActive() { return $this-&gt;where(&#39;verified&#39;, 1)-&gt;whereNotNull(&#39;deleted_at&#39;)-&gt;get(); } public function getArticles() { return $this-&gt;whereHas(&#39;user&#39;, function ($q) { $q-&gt;where(&#39;verified&#39;, 1)-&gt;whereNotNull(&#39;deleted_at&#39;); })-&gt;get(); } Good: public function scopeActive($q) { return $q-&gt;where(&#39;verified&#39;, 1)-&gt;whereNotNull(&#39;deleted_at&#39;); } public function getActive() { return $this-&gt;active()-&gt;get(); } public function getArticles() { return $this-&gt;whereHas(&#39;user&#39;, function ($q) { $q-&gt;active(); })-&gt;get(); }",
    "url": "http://localhost:4000/laravel-best-practices/docs/dont-repeat-yourself/",
    "relUrl": "/docs/dont-repeat-yourself/"
  },
  "7": {
    "id": "7",
    "title": "Home",
    "content": "Home",
    "url": "http://localhost:4000/laravel-best-practices/",
    "relUrl": "/"
  },
  "8": {
    "id": "8",
    "title": "Use IoC Container for Long Term Projects",
    "content": "Use IoC container or facades instead of new Class. new Class syntax creates tight coupling between classes and complicates testing. Use IoC container or facades instead. Bad: $user = new User; $user-&gt;create($request-&gt;validated()); Good: public function __construct(User $user) { $this-&gt;user = $user; } .... $this-&gt;user-&gt;create($request-&gt;validated());",
    "url": "http://localhost:4000/laravel-best-practices/docs/ioc-container/",
    "relUrl": "/docs/ioc-container/"
  },
  "9": {
    "id": "9",
    "title": "Mass assignment",
    "content": "Mass assignment Bad: $article = new Article; $article-&gt;title = $request-&gt;title; $article-&gt;content = $request-&gt;content; $article-&gt;verified = $request-&gt;verified; // Add category to article $article-&gt;category_id = $category-&gt;id; $article-&gt;save(); Good: $category-&gt;article()-&gt;create($request-&gt;validated());",
    "url": "http://localhost:4000/laravel-best-practices/docs/mass-assignment/",
    "relUrl": "/docs/mass-assignment/"
  },
  "10": {
    "id": "10",
    "title": "Naming Conventions",
    "content": "Follow Laravel naming conventions Follow PSR standards. Also, follow naming conventions accepted by Laravel community: What How Good Bad Controller singular ArticleController ArticlesController Route plural articles/1 article/1 Named route snake_case with dot notation users.show_active users.show-active, show-active-users Model singular User Users hasOne or belongsTo relationship singular articleComment articleComments, article_comment All other relationships plural articleComments articleComment, article_comments Table plural article_comments article_comment, articleComments Pivot table singular model names in alphabetical order article_user user_article, articles_users Table column snake_case without model name meta_title MetaTitle; article_meta_title Model property snake_case $model-&gt;created_at $model-&gt;createdAt Foreign key singular model name with _id suffix article_id ArticleId, id_article, articles_id Primary key - id custom_id Migration - 2017_01_01_000000_create_articles_table 2017_01_01_000000_articles Method camelCase getAll get_all Method in resource controller table store saveArticle Method in test class camelCase testGuestCannotSeeArticle test_guest_cannot_see_article Variable camelCase $articlesWithAuthor $articles_with_author Collection descriptive, plural $activeUsers = User::active()-&gt;get() $active, $data Object descriptive, singular $activeUser = User::active()-&gt;first() $users, $obj Config and language files index snake_case articles_enabled ArticlesEnabled; articles-enabled View snake_case show_filtered.blade.php showFiltered.blade.php, show-filtered.blade.php Config snake_case google_calendar.php googleCalendar.php, google-calendar.php Contract (interface) adjective or noun Authenticatable AuthenticationInterface, IAuthentication Trait adjective Notifiable NotificationTrait",
    "url": "http://localhost:4000/laravel-best-practices/docs/naming-conventions/",
    "relUrl": "/docs/naming-conventions/"
  },
  "11": {
    "id": "11",
    "title": "Other good practices",
    "content": "Other good practices Never put any logic in routes files. Minimize usage of vanilla PHP in Blade templates.",
    "url": "http://localhost:4000/laravel-best-practices/docs/other-good-practices/",
    "relUrl": "/docs/other-good-practices/"
  },
  "12": {
    "id": "12",
    "title": "Prefer to use Eloquent over raw SQL queries",
    "content": "Prefer to use Eloquent over using Query Builder and raw SQL queries. Prefer collections over arrays Eloquent allows you to write readable and maintainable code. Also, Eloquent has great built-in tools like soft deletes, events, scopes etc. Bad: SELECT * FROM `articles` WHERE EXISTS (SELECT * FROM `users` WHERE `articles`.`user_id` = `users`.`id` AND EXISTS (SELECT * FROM `profiles` WHERE `profiles`.`user_id` = `users`.`id`) AND `users`.`deleted_at` IS NULL) AND `verified` = &#39;1&#39; AND `active` = &#39;1&#39; ORDER BY `created_at` DESC Good: Article::has(&#39;user.profile&#39;)-&gt;verified()-&gt;latest()-&gt;get();",
    "url": "http://localhost:4000/laravel-best-practices/docs/prefer-eloquent/",
    "relUrl": "/docs/prefer-eloquent/"
  },
  "13": {
    "id": "13",
    "title": "Shorter and Readable Syntax",
    "content": "Use shorter and more readable syntax where possible Bad: $request-&gt;session()-&gt;get(&#39;cart&#39;); $request-&gt;input(&#39;name&#39;); Good: session(&#39;cart&#39;); $request-&gt;name; More examples: Common syntax Shorter and more readable syntax Session::get(&#39;cart&#39;) session(&#39;cart&#39;) $request-&gt;session()-&gt;get(&#39;cart&#39;) session(&#39;cart&#39;) Session::put(&#39;cart&#39;, $data) session([&#39;cart&#39; =&gt; $data]) $request-&gt;input(&#39;name&#39;), Request::get(&#39;name&#39;) $request-&gt;name, request(&#39;name&#39;) return Redirect::back() return back() is_null($object-&gt;relation) ? null : $object-&gt;relation-&gt;id optional($object-&gt;relation)-&gt;id return view(&#39;index&#39;)-&gt;with(&#39;title&#39;, $title)-&gt;with(&#39;client&#39;, $client) return view(&#39;index&#39;, compact(&#39;title&#39;, &#39;client&#39;)) $request-&gt;has(&#39;value&#39;) ? $request-&gt;value : &#39;default&#39;; $request-&gt;get(&#39;value&#39;, &#39;default&#39;) Carbon::now(), Carbon::today() now(), today() App::make(&#39;Class&#39;) app(&#39;Class&#39;) -&gt;where(&#39;column&#39;, &#39;=&#39;, 1) -&gt;where(&#39;column&#39;, 1) -&gt;orderBy(&#39;created_at&#39;, &#39;desc&#39;) -&gt;latest() -&gt;orderBy(&#39;age&#39;, &#39;desc&#39;) -&gt;latest(&#39;age&#39;) -&gt;orderBy(&#39;created_at&#39;, &#39;asc&#39;) -&gt;oldest() -&gt;select(&#39;id&#39;, &#39;name&#39;)-&gt;get() -&gt;get([&#39;id&#39;, &#39;name&#39;]) -&gt;first()-&gt;name -&gt;value(&#39;name&#39;)",
    "url": "http://localhost:4000/laravel-best-practices/docs/shorter-readable-syntax/",
    "relUrl": "/docs/shorter-readable-syntax/"
  },
  "14": {
    "id": "14",
    "title": "Single responsibility principle",
    "content": "Single responsibility principle A class and a method should have only one responsibility. Bad: public function getFullNameAttribute() { if (auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole(&#39;client&#39;) &amp;&amp; auth()-&gt;user()-&gt;isVerified()) { return &#39;Mr. &#39; . $this-&gt;first_name . &#39; &#39; . $this-&gt;middle_name . &#39; &#39; . $this-&gt;last_name; } else { return $this-&gt;first_name[0] . &#39;. &#39; . $this-&gt;last_name; } } Good: public function getFullNameAttribute() { return $this-&gt;isVerifiedClient() ? $this-&gt;getFullNameLong() : $this-&gt;getFullNameShort(); } public function isVerifiedClient() { return auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole(&#39;client&#39;) &amp;&amp; auth()-&gt;user()-&gt;isVerified(); } public function getFullNameLong() { return &#39;Mr. &#39; . $this-&gt;first_name . &#39; &#39; . $this-&gt;middle_name . &#39; &#39; . $this-&gt;last_name; } public function getFullNameShort() { return $this-&gt;first_name[0] . &#39;. &#39; . $this-&gt;last_name; }",
    "url": "http://localhost:4000/laravel-best-practices/docs/single-repository-principle/",
    "relUrl": "/docs/single-repository-principle/"
  },
  "15": {
    "id": "15",
    "title": "Use accessors and mutators",
    "content": "Use Accessors and Mutators instead of mutating in controllers and blade Bad: {% raw %}{{ Carbon::createFromFormat(&#39;Y-d-m H-i&#39;, $object-&gt;ordered_at)-&gt;toDateString() }}{% endraw %} {% raw %}{{ Carbon::createFromFormat(&#39;Y-d-m H-i&#39;, $object-&gt;ordered_at)-&gt;format(&#39;m-d&#39;) }}{% endraw %} Good: // Model protected $dates = [&#39;ordered_at&#39;, &#39;created_at&#39;, &#39;updated_at&#39;]; public function getSomeDateAttribute($date) { return $date-&gt;format(&#39;m-d&#39;); } // View {% raw %}{{ $object-&gt;ordered_at-&gt;toDateString() }}{% endraw %} {% raw %}{{ $object-&gt;ordered_at-&gt;some_date }}{% endraw %}",
    "url": "http://localhost:4000/laravel-best-practices/docs/use-accessors-mutators/",
    "relUrl": "/docs/use-accessors-mutators/"
  },
  "16": {
    "id": "16",
    "title": "Use constants and config",
    "content": "Use config and language files, constants instead of text in the code Bad: public function isNormal() { return $article-&gt;type === &#39;normal&#39;; } return back()-&gt;with(&#39;message&#39;, &#39;Your article has been added!&#39;); Good: public function isNormal() { return $article-&gt;type === Article::TYPE_NORMAL; } return back()-&gt;with(&#39;message&#39;, __(&#39;app.article_added&#39;));",
    "url": "http://localhost:4000/laravel-best-practices/docs/use-constants-config-lang/",
    "relUrl": "/docs/use-constants-config-lang/"
  },
  "17": {
    "id": "17",
    "title": "Use standard laravel tools",
    "content": "Use standard Laravel tools accepted by community Prefer to use built-in Laravel functionality and community packages instead of using 3rd party packages and tools. Any developer who will work with your app in the future will need to learn new tools. Also, chances to get help from the Laravel community are significantly lower when you’re using a 3rd party package or tool. Do not make your client pay for that. Task Standard tools 3rd party tools Authorization Policies Entrust, Sentinel and other packages Compiling assets Laravel Mix Grunt, Gulp, 3rd party packages Development Environment Homestead Docker Deployment Laravel Forge Deployer and other solutions Unit testing PHPUnit, Mockery Phpspec Browser testing Laravel Dusk Codeception DB Eloquent SQL, Doctrine Templates Blade Twig Working with data Laravel collections Arrays Form validation Request classes 3rd party packages, validation in controller Authentication Built-in 3rd party packages, your own solution API authentication Laravel Passport 3rd party JWT and OAuth packages Creating API Built-in Dingo API and similar packages Working with DB structure Migrations Working with DB structure directly Localization Built-in 3rd party packages Realtime user interfaces Laravel Echo, Pusher 3rd party packages and working with WebSockets directly Generating testing data Seeder classes, Model Factories, Faker Creating testing data manually Task scheduling Laravel Task Scheduler Scripts and 3rd party packages DB MySQL, PostgreSQL, SQLite, SQL Server MongoDB",
    "url": "http://localhost:4000/laravel-best-practices/docs/use-standard-laravel-tools/",
    "relUrl": "/docs/use-standard-laravel-tools/"
  },
  "18": {
    "id": "18",
    "title": "Use Request class for validations",
    "content": "Move validation from controllers to Request classes. Bad: public function store(Request $request) { $request-&gt;validate([ &#39;title&#39; =&gt; &#39;required|unique:posts|max:255&#39;, &#39;body&#39; =&gt; &#39;required&#39;, &#39;publish_at&#39; =&gt; &#39;nullable|date&#39;, ]); .... } Good: public function store(PostRequest $request) { .... } class PostRequest extends Request { public function rules() { return [ &#39;title&#39; =&gt; &#39;required|unique:posts|max:255&#39;, &#39;body&#39; =&gt; &#39;required&#39;, &#39;publish_at&#39; =&gt; &#39;nullable|date&#39;, ]; } }",
    "url": "http://localhost:4000/laravel-best-practices/docs/validation/",
    "relUrl": "/docs/validation/"
  }
  
}
